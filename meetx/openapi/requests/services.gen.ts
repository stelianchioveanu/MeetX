// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostApiAuthorizationLoginData, PostApiAuthorizationLoginResponse, PostApiAuthorizationRegisterData, PostApiAuthorizationRegisterResponse, PostApiAuthorizationRequestResetData, PostApiAuthorizationRequestResetResponse, PostApiAuthorizationResetPasswordData, PostApiAuthorizationResetPasswordResponse, PostApiAuthorizationRefreshTokenResponse, PostApiGroupAddGroupData, PostApiGroupAddGroupResponse, GetApiGroupGetGroupsData, GetApiGroupGetGroupsResponse, GetApiGroupGetInviteLinkData, GetApiGroupGetInviteLinkResponse, PostApiGroupJoinGroupData, PostApiGroupJoinGroupResponse, PutApiGroupLeaveGroupData, PutApiGroupLeaveGroupResponse, PutApiGroupChangeRoleData, PutApiGroupChangeRoleResponse, GetApiGroupGetGroupMembersData, GetApiGroupGetGroupMembersResponse, GetApiGroupGetGroupData, GetApiGroupGetGroupResponse, PutApiGroupRemoveMemberData, PutApiGroupRemoveMemberResponse, DeleteApiGroupDeleteGroupData, DeleteApiGroupDeleteGroupResponse, GetApiGroupGetMemberData, GetApiGroupGetMemberResponse, GetApiGroupGetGroupDetailsData, GetApiGroupGetGroupDetailsResponse, GetApiMessageGetTopicMessagesData, GetApiMessageGetTopicMessagesResponse, GetApiMessageGetPrivateMessagesData, GetApiMessageGetPrivateMessagesResponse, DeleteApiMessageDeleteMessageData, DeleteApiMessageDeleteMessageResponse, PostApiMessageFilesAddFilesTopicMessageData, PostApiMessageFilesAddFilesTopicMessageResponse, GetApiPrivateConversationGetPrivateConversationsData, GetApiPrivateConversationGetPrivateConversationsResponse, GetApiPrivateConversationGetPrivateConversationData, GetApiPrivateConversationGetPrivateConversationResponse, PostApiTopicAddTopicData, PostApiTopicAddTopicResponse, GetApiTopicGetTopicData, GetApiTopicGetTopicResponse, GetApiTopicGetTopicsData, GetApiTopicGetTopicsResponse, GetApiTopicGetMyTopicsData, GetApiTopicGetMyTopicsResponse, GetApiTopicGetRecentTopicsData, GetApiTopicGetRecentTopicsResponse, DeleteApiTopicDeleteTopicData, DeleteApiTopicDeleteTopicResponse, GetApiUserGetByIdByIdData, GetApiUserGetByIdByIdResponse, GetApiUserGetMeResponse, GetApiUserGetPageData, GetApiUserGetPageResponse, PostApiUserAddData, PostApiUserAddResponse, PutApiUserUpdateData, PutApiUserUpdateResponse } from './types.gen';

export class AuthorizationService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LoginResponseDTORequestResponse Success
     * @throws ApiError
     */
    public static postApiAuthorizationLogin(data: PostApiAuthorizationLoginData = {}): CancelablePromise<PostApiAuthorizationLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Authorization/Login',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static postApiAuthorizationRegister(data: PostApiAuthorizationRegisterData = {}): CancelablePromise<PostApiAuthorizationRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Authorization/Register',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static postApiAuthorizationRequestReset(data: PostApiAuthorizationRequestResetData = {}): CancelablePromise<PostApiAuthorizationRequestResetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Authorization/RequestReset',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static postApiAuthorizationResetPassword(data: PostApiAuthorizationResetPasswordData = {}): CancelablePromise<PostApiAuthorizationResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Authorization/ResetPassword',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns RefreshResponseDTORequestResponse Success
     * @throws ApiError
     */
    public static postApiAuthorizationRefreshToken(): CancelablePromise<PostApiAuthorizationRefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Authorization/RefreshToken'
        });
    }
    
}

export class GroupService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static postApiGroupAddGroup(data: PostApiGroupAddGroupData = {}): CancelablePromise<PostApiGroupAddGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Group/AddGroup',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @returns GroupDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiGroupGetGroups(data: GetApiGroupGetGroupsData = {}): CancelablePromise<GetApiGroupGetGroupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Group/GetGroups',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns GroupLinkResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiGroupGetInviteLink(data: GetApiGroupGetInviteLinkData = {}): CancelablePromise<GetApiGroupGetInviteLinkResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Group/GetInviteLink',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static postApiGroupJoinGroup(data: PostApiGroupJoinGroupData = {}): CancelablePromise<PostApiGroupJoinGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Group/JoinGroup',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static putApiGroupLeaveGroup(data: PutApiGroupLeaveGroupData = {}): CancelablePromise<PutApiGroupLeaveGroupResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/Group/LeaveGroup',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static putApiGroupChangeRole(data: PutApiGroupChangeRoleData = {}): CancelablePromise<PutApiGroupChangeRoleResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/Group/ChangeRole',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @param data.groupId
     * @returns GroupMemberDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiGroupGetGroupMembers(data: GetApiGroupGetGroupMembersData = {}): CancelablePromise<GetApiGroupGetGroupMembersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Group/GetGroupMembers',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize,
                groupId: data.groupId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.groupId
     * @returns GroupGetDTORequestResponse Success
     * @throws ApiError
     */
    public static getApiGroupGetGroup(data: GetApiGroupGetGroupData = {}): CancelablePromise<GetApiGroupGetGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Group/GetGroup',
            query: {
                groupId: data.groupId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static putApiGroupRemoveMember(data: PutApiGroupRemoveMemberData = {}): CancelablePromise<PutApiGroupRemoveMemberResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/Group/RemoveMember',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static deleteApiGroupDeleteGroup(data: DeleteApiGroupDeleteGroupData = {}): CancelablePromise<DeleteApiGroupDeleteGroupResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/Group/DeleteGroup',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.groupId
     * @param data.userId
     * @returns GroupMemberDTORequestResponse Success
     * @throws ApiError
     */
    public static getApiGroupGetMember(data: GetApiGroupGetMemberData = {}): CancelablePromise<GetApiGroupGetMemberResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Group/GetMember',
            query: {
                groupId: data.groupId,
                userId: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.groupId
     * @returns GroupDetailsDTORequestResponse Success
     * @throws ApiError
     */
    public static getApiGroupGetGroupDetails(data: GetApiGroupGetGroupDetailsData = {}): CancelablePromise<GetApiGroupGetGroupDetailsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Group/GetGroupDetails',
            query: {
                groupId: data.groupId
            }
        });
    }
    
}

export class MessageService {
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @param data.groupId
     * @param data.topicId
     * @param data.convId
     * @param data.lastMessageId
     * @returns MessageDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiMessageGetTopicMessages(data: GetApiMessageGetTopicMessagesData = {}): CancelablePromise<GetApiMessageGetTopicMessagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Message/GetTopicMessages',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize,
                GroupId: data.groupId,
                TopicId: data.topicId,
                ConvId: data.convId,
                LastMessageId: data.lastMessageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @param data.groupId
     * @param data.topicId
     * @param data.convId
     * @param data.lastMessageId
     * @returns MessageDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiMessageGetPrivateMessages(data: GetApiMessageGetPrivateMessagesData = {}): CancelablePromise<GetApiMessageGetPrivateMessagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Message/GetPrivateMessages',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize,
                GroupId: data.groupId,
                TopicId: data.topicId,
                ConvId: data.convId,
                LastMessageId: data.lastMessageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static deleteApiMessageDeleteMessage(data: DeleteApiMessageDeleteMessageData = {}): CancelablePromise<DeleteApiMessageDeleteMessageResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/Message/DeleteMessage',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class MessageFilesService {
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns FilesAddedDTORequestResponse Success
     * @throws ApiError
     */
    public static postApiMessageFilesAddFilesTopicMessage(data: PostApiMessageFilesAddFilesTopicMessageData = {}): CancelablePromise<PostApiMessageFilesAddFilesTopicMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/MessageFiles/AddFilesTopicMessage',
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
}

export class PrivateConversationService {
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @returns PrivateConversationDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiPrivateConversationGetPrivateConversations(data: GetApiPrivateConversationGetPrivateConversationsData = {}): CancelablePromise<GetApiPrivateConversationGetPrivateConversationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/PrivateConversation/GetPrivateConversations',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.convId
     * @returns PrivateConversationDTORequestResponse Success
     * @throws ApiError
     */
    public static getApiPrivateConversationGetPrivateConversation(data: GetApiPrivateConversationGetPrivateConversationData = {}): CancelablePromise<GetApiPrivateConversationGetPrivateConversationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/PrivateConversation/GetPrivateConversation',
            query: {
                convId: data.convId
            }
        });
    }
    
}

export class TopicService {
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static postApiTopicAddTopic(data: PostApiTopicAddTopicData = {}): CancelablePromise<PostApiTopicAddTopicResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Topic/AddTopic',
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.groupId
     * @param data.topicId
     * @returns TopicDTORequestResponse Success
     * @throws ApiError
     */
    public static getApiTopicGetTopic(data: GetApiTopicGetTopicData = {}): CancelablePromise<GetApiTopicGetTopicResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Topic/GetTopic',
            query: {
                GroupId: data.groupId,
                TopicId: data.topicId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @param data.groupId
     * @returns TopicDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiTopicGetTopics(data: GetApiTopicGetTopicsData = {}): CancelablePromise<GetApiTopicGetTopicsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Topic/GetTopics',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize,
                groupId: data.groupId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @param data.groupId
     * @returns TopicDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiTopicGetMyTopics(data: GetApiTopicGetMyTopicsData = {}): CancelablePromise<GetApiTopicGetMyTopicsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Topic/GetMyTopics',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize,
                groupId: data.groupId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @param data.groupId
     * @returns TopicDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiTopicGetRecentTopics(data: GetApiTopicGetRecentTopicsData = {}): CancelablePromise<GetApiTopicGetRecentTopicsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/Topic/GetRecentTopics',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize,
                groupId: data.groupId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static deleteApiTopicDeleteTopic(data: DeleteApiTopicDeleteTopicData = {}): CancelablePromise<DeleteApiTopicDeleteTopicResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/Topic/DeleteTopic',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class UserService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns UserDTORequestResponse Success
     * @throws ApiError
     */
    public static getApiUserGetByIdById(data: GetApiUserGetByIdByIdData): CancelablePromise<GetApiUserGetByIdByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/User/GetById/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @returns UserDTORequestResponse Success
     * @throws ApiError
     */
    public static getApiUserGetMe(): CancelablePromise<GetApiUserGetMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/User/GetMe'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page
     * @param data.pageSize
     * @returns UserDTOPagedResponseRequestResponse Success
     * @throws ApiError
     */
    public static getApiUserGetPage(data: GetApiUserGetPageData = {}): CancelablePromise<GetApiUserGetPageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/User/GetPage',
            query: {
                Search: data.search,
                Page: data.page,
                PageSize: data.pageSize
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static postApiUserAdd(data: PostApiUserAddData = {}): CancelablePromise<PostApiUserAddResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/User/Add',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns RequestResponse Success
     * @throws ApiError
     */
    public static putApiUserUpdate(data: PutApiUserUpdateData = {}): CancelablePromise<PutApiUserUpdateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/User/Update',
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
}